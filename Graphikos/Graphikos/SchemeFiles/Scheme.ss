(define (line x y x2 y2)
  (if (and (not(= y y2)) (= x x2))
       (if ( < y y2)
          (cons x (cons (+ y 1) (line x (+ y 1) x2 y2)))
          (if ( > y y2)
              (cons x (cons (- y 1) (line x (- y 1) x2 y2)))))
  (if ( = x x2)
       '()
       (cons (+ x 1) (cons  (+ y (/ (- y2 y) (- x2 x)))
              (line (+ x 1) (+ y (/ (- y2 y) (- x2 x))) x2 y2 ))
        ))))


(define (flatten x)
  (cond ((null? x) '())
        ((pair? x) (append (flatten (car x)) (flatten (cdr x))))
        (else (list x))))


(define (rectangle x1 y1 x2 y2)
  (if (= x1 x2)
  '()
  (flatten
  (cons
   (cons
    (cons
     (line x1 y1 x1 y2)
     (line x1 y2 x2 y2))
    (line x2 y2 x2 y1 ))
   (line x1 y1 x2 y1)))
  ))

  (define (circle x0 y0 r)
  (let((x 0) (y r) (dp (- 1 r)))
      (letrec ((GetCircleCoor (lambda (x0 x y0 y r)
    (let ((dp1 (+ dp (+ (* (+ dp 2) (+ x 1) ) 3))) (dp2 (+ dp ( + (* (- (* (+ dp 2) (+ x 1) ) 2) (- y 1)) 5))))
  (if (> x y)
         '()
         (if (< dp 0)
             (cons (+ x0 x) (cons (+ y0 y)
             (cons (- x0 x) (cons (+ y0 y)
             (cons (+ x0 x) (cons (- y0 y)
             (cons (- x0 x) (cons (- y0 y)
             (cons (+ x0 y) (cons (+ y0 x)
             (cons (- x0 y) (cons (+ y0 x)
             (cons (+ x0 y) (cons (- y0 x)
             (cons (- x0 y) (cons (- y0 x)(GetCircleCoor x0 (+ x 1) y0 (- y 1) dp1 )))))))))))))))))
             
             (cons (+ x0 x) (cons (+ y0 y)
             (cons (- x0 x) (cons (+ y0 y)
             (cons (+ x0 x) (cons (- y0 y)
             (cons (- x0 x) (cons (- y0 y)
             (cons (+ x0 y) (cons (+ y0 x)
             (cons (- x0 y) (cons (+ y0 x)
             (cons (+ x0 y) (cons (- y0 x)
             (cons (- x0 y) (cons (- y0 x)(GetCircleCoor x0 (+ x 1) y0 (- y 1) dp2 )))))))))))))))))
  ))))))
    (GetCircleCoor x0 x y0 y r))))